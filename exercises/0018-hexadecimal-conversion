
The printf() function has a format specification for printing
integers as hexadecimal values, "%x".

Write a function to print an integer out in hexadecimal without
using printf's built in format specifcation (and don't
use  sprintf, fprintf or any similar functions).

Hints:

1.  Here is a start:

	#include <stdio.h>

	void print_hexnumber(unsigned int value)
	{
		/* fill in the code that goes here. */
	}

	int main(int argc, char *argv[])
	{
		int number;

		do {
			printf("Enter a decimal integer (-1 to quit): ");
			scanf("%d", &number);
			printf("%d converted to hexadecimal is:\n", number);
			print_hexnumber((unsigned int) number);
		} while (number != -1);
		return 0;
	}

2. Consider: hexadecimal digits have values between 0 and 15 decimal:
	0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F

3. Integers in C are represented as binary values internally.
   It takes exactly 4 bits to represent 1 hexadecimal digit.
   That is, there is a one to one mapping of every possible 
   combination of 4 bits to hexadecimal digits:

   binary    hex digit
   0000      0
   0001      1
   0010      2
   0011      3
   0100      4
   0101      5
   0110      6
   0111      7
   1000      8
   1001      9
   1010      A
   1011      B
   1100      C
   1101      D
   1110      E
   1111      F

4. If there is a way to extract the bits of the integer out in 4 bit
   chunks, these values (which will be between 0 and 15) can be mapped
   to the hex digits.  (Think about bitwise operators: >>, <<, & and |.)

5. How can they be mapped... maybe via an array?  Maybe a string? 
   Maybe a string, treated as an array?


